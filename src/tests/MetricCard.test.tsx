import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import MetricCard from '../components/common/MetricCard'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
import InfoTooltip from '../components/common/InfoTooltip'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π InfoTooltip –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

// –ú–æ–∫–∏—Ä—É–µ–º InfoTooltip, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏ –∑–¥–µ—Å—å –Ω–µ –≤–∞–∂–Ω—ã
// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å toHaveBeenCalledWith –∏ undefined –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
jest.mock('../components/common/InfoTooltip', () => (props: { text: string }) => <div data-testid="mock-tooltip">{props.text}</div>);


describe('MetricCard Component', () => {
  const mockFormatCurrency = (val: number | string) => `$${Number(val).toLocaleString('ru-RU')}`;

  test('renders with title and value, using default formatter', () => {
    render(<MetricCard title="Test Metric" value={1000} />);
    
    expect(screen.getByText('Test Metric')).toBeInTheDocument();
    const valueElement = screen.getByTestId('value');
    expect(valueElement).toBeInTheDocument();
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤ USD —Å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–º –ø—Ä–æ–±–µ–ª–æ–º –∏ –∑–Ω–∞–∫–æ–º $ –≤ –∫–æ–Ω—Ü–µ –¥–ª—è ru-RU
    // –ü—Ä–∏–º–µ—Ä: 1 000 $
    // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —á–∏—Å–ª–æ 1000 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    expect(valueElement.textContent).toContain('1¬†000'); 
  });

  test('renders with title and value, using custom formatter', () => {
    render(<MetricCard title="Test Metric" value={12345} formatValue={mockFormatCurrency} />);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º toContain, —á—Ç–æ–±—ã –±—ã—Ç—å –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∫ —Ç–∏–ø—É –ø—Ä–æ–±–µ–ª–∞
    expect(screen.getByTestId('value').textContent).toContain('12');
    expect(screen.getByTestId('value').textContent).toContain('345');
    expect(screen.getByTestId('value').textContent?.startsWith('$')).toBe(true);
  });


  test('applies custom color', () => {
    render(<MetricCard title="Test Metric" value={1000} color="#FF0000" formatValue={mockFormatCurrency}/>);
    
    const valueElement = screen.getByTestId('value');
    expect(valueElement).toHaveStyle('color: #FF0000');
  });

  test('renders with icon', () => {
    render(
      <MetricCard 
        title="Test Metric" 
        value={1000} 
        icon={<span data-testid="custom-icon">üî•</span>} 
        formatValue={mockFormatCurrency}
      />
    );
    
    expect(screen.getByTestId('icon')).toBeInTheDocument();
    expect(screen.getByTestId('custom-icon')).toBeInTheDocument();
  });

  test('renders subValue when provided', () => {
    render(<MetricCard title="Test Metric" value={1000} subValue="Additional info" formatValue={mockFormatCurrency} />);
    
    expect(screen.getByTestId('sub-value')).toBeInTheDocument();
    expect(screen.getByTestId('sub-value')).toHaveTextContent('Additional info');
  });

  test('applies large size class when large is true', () => {
    render(<MetricCard title="Test Metric" value={1000} large={true} formatValue={mockFormatCurrency} />);
    
    const card = screen.getByTestId('metric-card');
    expect(card).toHaveClass('col-span-2');
    
    const value = screen.getByTestId('value');
    expect(value).toHaveClass('text-4xl');
  });

  test('renders tooltip when provided (using mock)', () => {
    render(<MetricCard title="Test Metric" value={1000} tooltip="Tooltip text" formatValue={mockFormatCurrency} />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –º–æ–∫ InfoTooltip –±—ã–ª –≤—ã–∑–≤–∞–Ω –∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª —Ç–µ–∫—Å—Ç
    const mockTooltipRendered = screen.getByTestId('mock-tooltip');
    expect(mockTooltipRendered).toBeInTheDocument();
    expect(mockTooltipRendered).toHaveTextContent('Tooltip text');
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É toHaveBeenCalledWith, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å undefined –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º–æ–∫ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç.
  });

  test('renders non-numeric string value correctly with default formatter', () => {
    // –ï—Å–ª–∏ formatValue –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π MetricCard –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π defaultFormatCurrency,
    // –∫–æ—Ç–æ—Ä—ã–π –¥–ª—è –Ω–µ-—á–∏—Å–µ–ª (—Å—Ç—Ä–æ–∫) –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å.
    render(<MetricCard title="Test Metric" value="N/A" />);
    expect(screen.getByTestId('value')).toHaveTextContent('N/A');
  });

  test('renders non-numeric value with custom formatter', () => {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å formatValue, –æ–Ω –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
    // –¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ MetricCard: {typeof value === 'number' ? formatter(value) : value}
    // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ value - –Ω–µ —á–∏—Å–ª–æ, formatter –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è.
    // –ß—Ç–æ–±—ã —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏–ª —Å —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:
    render(<MetricCard title="Test Metric" value="Custom Text" formatValue={(v) => `Formatted: ${v}`} />);
    expect(screen.getByTestId('value')).toHaveTextContent('Custom Text'); 
    // –ï—Å–ª–∏ –±—ã –º—ã —Ö–æ—Ç–µ–ª–∏, —á—Ç–æ–±—ã formatValue –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–ª—Å—è, –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å MetricCard.
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞: formatter ? formatter(value) : (typeof value === 'number' ? defaultValueFormatter(value) : value)
  });

  test('renders trend icon when trend is provided', () => {
    const { rerender } = render(<MetricCard title="Trend Up" value={100} trend="up" formatValue={mockFormatCurrency} />);
    const trendElementUp = screen.getByTestId('trend-icon-up');
    expect(trendElementUp).toBeInTheDocument();
    expect(trendElementUp).toHaveClass('text-green-600');

    rerender(<MetricCard title="Trend Down" value={200} trend="down" formatValue={mockFormatCurrency} />);
    const trendElementDown = screen.getByTestId('trend-icon-down');
    expect(trendElementDown).toBeInTheDocument();
    expect(trendElementDown).toHaveClass('text-red-600');
  });
});
