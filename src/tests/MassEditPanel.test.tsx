import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import MassEditPanel from '../components/common/MassEditPanel';

// –ú–æ–∫–∏—Ä—É–µ–º InfoTooltip
jest.mock('../components/common/InfoTooltip', () => (props: { text: string }) => 
  <div data-testid="mock-tooltip">{props.text}</div>
);

describe('MassEditPanel Component', () => {
  const mockOnApply = jest.fn();
  const defaultProps = {
    count: 12,
    onApply: mockOnApply,
    currentValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    title: 'Test Panel',
    min: 0,
    max: 100
  };

  beforeEach(() => {
    mockOnApply.mockClear();
  });

  test('renders with title and current values preview', () => {
    render(<MassEditPanel {...defaultProps} />);
    
    expect(screen.getByText('Test Panel')).toBeInTheDocument();
    expect(screen.getByText(/–¢–µ–∫—É—â–∏–µ: \[1, 2, 3, 4, 5, 6, 7, 8\.\.\.\]/)).toBeInTheDocument();
  });

  test('toggles edit panel when button is clicked', () => {
    render(<MassEditPanel {...defaultProps} />);
    
    const toggleButton = screen.getByText('üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
    expect(toggleButton).toBeInTheDocument();
    
    // –ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
    expect(screen.queryByText('üéØ –ü—Ä–µ—Å–µ—Ç—ã')).not.toBeInTheDocument();
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
    fireEvent.click(toggleButton);
    expect(screen.getByText('üéØ –ü—Ä–µ—Å–µ—Ç—ã')).toBeInTheDocument();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
    const closeButton = screen.getByText('üîΩ –°–≤–µ—Ä–Ω—É—Ç—å');
    fireEvent.click(closeButton);
    expect(screen.queryByText('üéØ –ü—Ä–µ—Å–µ—Ç—ã')).not.toBeInTheDocument();
  });

  test('switches between different modes', () => {
    render(<MassEditPanel {...defaultProps} />);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
    fireEvent.click(screen.getByText('üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'));
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∂–∏–º "–ü—Ä–µ—Å–µ—Ç—ã"
    expect(screen.getByText('–ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã:')).toBeInTheDocument();
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ "–¢–µ–∫—Å—Ç"
    fireEvent.click(screen.getByText('‚úèÔ∏è –¢–µ–∫—Å—Ç'));
    expect(screen.getByText(/–í–≤–µ–¥–∏—Ç–µ 12 —á–∏—Å–µ–ª/)).toBeInTheDocument();
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ "–®–∞–±–ª–æ–Ω"
    fireEvent.click(screen.getByText('üìà –®–∞–±–ª–æ–Ω'));
    expect(screen.getByText('–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')).toBeInTheDocument();
  });

  test('applies preset values', () => {
    render(<MassEditPanel {...defaultProps} />);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
    fireEvent.click(screen.getByText('üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'));
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ—Å–µ—Ç "–í—Å–µ –Ω—É–ª–∏"
    const zeroPreset = screen.getByText('–í—Å–µ –Ω—É–ª–∏');
    fireEvent.click(zeroPreset);
    
    expect(mockOnApply).toHaveBeenCalledWith(Array(12).fill(0));
  });

  test('applies text input values', () => {
    render(<MassEditPanel {...defaultProps} />);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    fireEvent.click(screen.getByText('üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'));
    fireEvent.click(screen.getByText('‚úèÔ∏è –¢–µ–∫—Å—Ç'));
    
    // –í–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
    const textarea = screen.getByRole('textbox');
    fireEvent.change(textarea, { target: { value: '1 2 3 4 5 6 7 8 9 10 11 12' } });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º
    fireEvent.click(screen.getByText('–ü—Ä–∏–º–µ–Ω–∏—Ç—å'));
    
    expect(mockOnApply).toHaveBeenCalledWith([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);
  });

  test('validates input count', () => {
    render(<MassEditPanel {...defaultProps} />);
    
    // –ú–æ–∫–∏—Ä—É–µ–º alert
    jest.spyOn(window, 'alert').mockImplementation(() => {});
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    fireEvent.click(screen.getByText('üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'));
    fireEvent.click(screen.getByText('‚úèÔ∏è –¢–µ–∫—Å—Ç'));
    
    // –í–≤–æ–¥–∏–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
    const textarea = screen.getByRole('textbox');
    fireEvent.change(textarea, { target: { value: '1 2 3' } });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º
    fireEvent.click(screen.getByText('–ü—Ä–∏–º–µ–Ω–∏—Ç—å'));
    
    expect(window.alert).toHaveBeenCalledWith('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ 12 –∑–Ω–∞—á–µ–Ω–∏–π. –ü–æ–ª—É—á–µ–Ω–æ: 3');
    expect(mockOnApply).not.toHaveBeenCalled();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º alert
    (window.alert as jest.Mock).mockRestore();
  });

  test('generates pattern values', () => {
    render(<MassEditPanel {...defaultProps} />);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º —à–∞–±–ª–æ–Ω–∞
    fireEvent.click(screen.getByText('üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'));
    fireEvent.click(screen.getByText('üìà –®–∞–±–ª–æ–Ω'));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 5, —à–∞–≥ 2
    const startInput = screen.getByDisplayValue('0');
    const stepInput = screen.getByDisplayValue('0');
    
    fireEvent.change(startInput, { target: { value: '5' } });
    fireEvent.change(stepInput, { target: { value: '2' } });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º
    fireEvent.click(screen.getByText('–ü—Ä–∏–º–µ–Ω–∏—Ç—å'));
    
    // –û–∂–∏–¥–∞–µ–º –ª–∏–Ω–µ–π–Ω—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é: 5, 7, 9, 11, ...
    const expected = Array.from({length: 12}, (_, i) => 5 + i * 2);
    expect(mockOnApply).toHaveBeenCalledWith(expected);
  });

  test('shows tooltip when provided', () => {
    render(<MassEditPanel {...defaultProps} tooltip="Test tooltip" />);
    
    expect(screen.getByTestId('mock-tooltip')).toBeInTheDocument();
    expect(screen.getByTestId('mock-tooltip')).toHaveTextContent('Test tooltip');
  });

  test('handles JSON input format', () => {
    render(<MassEditPanel {...defaultProps} />);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    fireEvent.click(screen.getByText('üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'));
    fireEvent.click(screen.getByText('‚úèÔ∏è –¢–µ–∫—Å—Ç'));
    
    // –í–≤–æ–¥–∏–º JSON —Ñ–æ—Ä–º–∞—Ç
    const textarea = screen.getByRole('textbox');
    fireEvent.change(textarea, { 
      target: { value: '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]' } 
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º
    fireEvent.click(screen.getByText('–ü—Ä–∏–º–µ–Ω–∏—Ç—å'));
    
    expect(mockOnApply).toHaveBeenCalledWith([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);
  });

  test('copies current values to clipboard', async () => {
    // –ú–æ–∫–∏—Ä—É–µ–º clipboard API
    Object.assign(navigator, {
      clipboard: {
        writeText: jest.fn().mockImplementation(() => Promise.resolve()),
      },
    });
    
    // –ú–æ–∫–∏—Ä—É–µ–º alert
    jest.spyOn(window, 'alert').mockImplementation(() => {});
    
    render(<MassEditPanel {...defaultProps} />);
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    fireEvent.click(screen.getByText('üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'));
    
    await waitFor(() => {
      expect(navigator.clipboard.writeText).toHaveBeenCalledWith('1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12');
      expect(window.alert).toHaveBeenCalledWith('–ó–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º alert
    (window.alert as jest.Mock).mockRestore();
  });

  test('validates min/max values', () => {
    render(<MassEditPanel {...defaultProps} min={10} max={20} />);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    fireEvent.click(screen.getByText('üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'));
    fireEvent.click(screen.getByText('‚úèÔ∏è –¢–µ–∫—Å—Ç'));
    
    // –í–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const textarea = screen.getByRole('textbox');
    fireEvent.change(textarea, { 
      target: { value: '5 15 25 15 15 15 15 15 15 15 15 15' } 
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º
    fireEvent.click(screen.getByText('–ü—Ä–∏–º–µ–Ω–∏—Ç—å'));
    
    // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º [10, 20]
    expect(mockOnApply).toHaveBeenCalledWith([10, 15, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15]);
  });
});