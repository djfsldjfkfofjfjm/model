import { renderHook, act } from '@testing-library/react';
import { useFinancialModel } from '../hooks/useFinancialModel';
import { FinancialModelParams, ClientsData, UpsellSettings } from '../types/FinancialTypes';

describe('–õ–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤', () => {
  const baseParams: FinancialModelParams = {
    taxMode: 'optimistic',
    customTaxRate: 15,
    fotMode: 'optimistic',
    apiCostPercentage: 30,
    churnRate: 0,
    maxImplementationCost: 200,
    integrationPrice: 500,
    cacPercentage: 50,
    implementationPercentage: 20,
    partnerCommissionRate: 10,
    messageUsageRate: 100, // –±—É–¥–µ–º –º–µ–Ω—è—Ç—å
    carryOverPercentage: 100,
    additionalMessagePrice: 0.30,
    fotOptimistic: Array(12).fill(1000),
    fotPessimistic: Array(12).fill(2000),
    channelDistribution: { direct: 60, partner: 40 },
    directSalesPercentage: 2,
    directMarketingPercentage: 1,
    directLeadCost: 50,
    partnerLeadCost: 20
  };

  const oneClient: ClientsData = {
    newClients75: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    newClients150: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    newClients250: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    newClients500: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    newClients1000: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    subscriptionPrice75: 75,
    subscriptionPrice150: 150,
    subscriptionPrice250: 250,
    subscriptionPrice500: 500,
    subscriptionPrice1000: 1000,
    messages75: 105,
    messages150: 210,
    messages250: 350,
    messages500: 700,
    messages1000: 1400,
    integrationPrice: 500
  };

  const noUpsell: UpsellSettings = {
    additionalBotsPercentage: 0,
    additionalBotsPrice: 0,
    newFeaturesPercentage: 0,
    newFeaturesPrice: 0,
    messagePacksPercentage: 0,
    messagePacksPrice: 0,
    integrationsPercentage: 0,
    integrationsPrice: 0
  };

  test('–ü—Ä–∏ 100% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–∫—É–ø–∞–µ—Ç –ø–∞–∫–µ—Ç –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü', () => {
    const params = { ...baseParams, messageUsageRate: 100 };
    const { result } = renderHook(() => 
      useFinancialModel(params, oneClient, noUpsell)
    );
    
    act(() => {
      result.current.calculateFinancialModel();
    });

    const monthlyData = result.current.monthlyData;
    
    console.log('\nüìä –¢–µ—Å—Ç: 100% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–∫—É–ø–∫–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü');
    monthlyData.forEach((month, i) => {
      console.log(`–ú–µ—Å—è—Ü ${i + 1}: –ù–∞–∫–æ–ø–ª–µ–Ω–æ=${month.unusedMessages75}, –ü–æ–∫—É–ø–∫–∞=${month.subscriptionRevenue75 > 0 ? '–î–ê' : '–ù–ï–¢'}`);
      
      // –ü—Ä–∏ 100% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
      expect(month.unusedMessages75).toBe(0);
      // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∫—É–ø–∫–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
      expect(month.subscriptionRevenue75).toBe(75);
    });
  });

  test('–ü—Ä–∏ 50% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Ä–µ–∂–µ', () => {
    const params = { ...baseParams, messageUsageRate: 50 };
    const { result } = renderHook(() => 
      useFinancialModel(params, oneClient, noUpsell)
    );
    
    act(() => {
      result.current.calculateFinancialModel();
    });

    const monthlyData = result.current.monthlyData;
    const totalPurchases = monthlyData.filter(m => m.subscriptionRevenue75 > 0).length;
    
    console.log('\nüìä –¢–µ—Å—Ç: 50% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü');
    monthlyData.forEach((month, i) => {
      console.log(`–ú–µ—Å—è—Ü ${i + 1}: –ù–∞–∫–æ–ø–ª–µ–Ω–æ=${month.unusedMessages75}, –ü–æ–∫—É–ø–∫–∞=${month.subscriptionRevenue75 > 0 ? '–î–ê' : '–ù–ï–¢'}`);
    });
    
    // –ü—Ä–∏ 50% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 12
    expect(totalPurchases).toBeLessThan(12);
    expect(totalPurchases).toBeGreaterThan(0);
  });

  test('–ü—Ä–∏ –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ (20%) –ø–æ–∫—É–ø–∫–∏ —Ä–µ–¥–∫–∏–µ', () => {
    const params = { ...baseParams, messageUsageRate: 20 };
    const { result } = renderHook(() => 
      useFinancialModel(params, oneClient, noUpsell)
    );
    
    act(() => {
      result.current.calculateFinancialModel();
    });

    const monthlyData = result.current.monthlyData;
    const totalPurchases = monthlyData.filter(m => m.subscriptionRevenue75 > 0).length;
    
    console.log('\nüìä –¢–µ—Å—Ç: 20% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - —Ä–µ–¥–∫–∏–µ –ø–æ–∫—É–ø–∫–∏');
    let purchaseMonths = [];
    monthlyData.forEach((month, i) => {
      if (month.subscriptionRevenue75 > 0) {
        purchaseMonths.push(i + 1);
      }
      console.log(`–ú–µ—Å—è—Ü ${i + 1}: –ù–∞–∫–æ–ø–ª–µ–Ω–æ=${month.unusedMessages75}, –ü–æ–∫—É–ø–∫–∞=${month.subscriptionRevenue75 > 0 ? '–î–ê' : '–ù–ï–¢'}`);
    });
    
    console.log(`–ü–æ–∫—É–ø–∫–∏ –≤ –º–µ—Å—è—Ü–∞—Ö: ${purchaseMonths.join(', ')}`);
    
    // –ü—Ä–∏ 20% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å –º–∞–ª–æ
    expect(totalPurchases).toBeLessThanOrEqual(3);
  });

  test('–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', () => {
    const scenarios = [
      { usage: 20, expected: '–æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è' },
      { usage: 50, expected: '—Å—Ä–µ–¥–Ω—è—è' },
      { usage: 80, expected: '–≤—ã—Å–æ–∫–∞—è' },
      { usage: 100, expected: '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è' },
      { usage: 120, expected: '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è + –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏—è' }
    ];

    const results = scenarios.map(scenario => {
      const params = { ...baseParams, messageUsageRate: scenario.usage };
      const { result } = renderHook(() => 
        useFinancialModel(params, oneClient, noUpsell)
      );
      
      act(() => {
        result.current.calculateFinancialModel();
      });

      return {
        usage: scenario.usage,
        subscriptionRevenue: result.current.totalData.totalSubscription,
        additionalMessagesRevenue: result.current.totalData.totalAdditionalMessagesRevenue
      };
    });

    console.log('\nüìä –í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã—Ä—É—á–∫—É:');
    results.forEach(r => {
      console.log(`${r.usage}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –ü–æ–¥–ø–∏—Å–∫–∏=$${r.subscriptionRevenue}, –î–æ–ø.—Å–æ–æ–±—â–µ–Ω–∏—è=$${r.additionalMessagesRevenue}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å
    expect(results[0].subscriptionRevenue).toBeLessThan(results[3].subscriptionRevenue); // 20% < 100%
    expect(results[1].subscriptionRevenue).toBeLessThan(results[3].subscriptionRevenue); // 50% < 100%
    expect(results[4].additionalMessagesRevenue).toBeGreaterThan(0); // –ü—Ä–∏ 120% –µ—Å—Ç—å –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏—è
  });
});