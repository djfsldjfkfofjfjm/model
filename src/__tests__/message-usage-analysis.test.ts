import { renderHook, act } from '@testing-library/react';
import { useFinancialModel } from '../hooks/useFinancialModel';
import { FinancialModelParams, ClientsData, UpsellSettings } from '../types/FinancialTypes';

describe('–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å % –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', () => {
  const baseParams: FinancialModelParams = {
    messageUsageRate: 50, // –ù–∞—á–∏–Ω–∞–µ–º —Å 50%
    carryOverPercentage: 80, // 80% –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è
    additionalMessagePrice: 0.05,
    integrationPrice: 500,
    churnRate: 5,
    apiCostPercentage: 10,
    channelDistribution: {
      direct: 60,
      partner: 40
    },
    partnerCommissionRate: 20,
    partnerLeadCost: 100,
    directSalesPercentage: 15,
    directMarketingPercentage: 10,
    directLeadCost: 150,
    implementationPercentage: 20,
    maxImplementationCost: 100,
    fotMode: 'optimistic',
    fotOptimistic: new Array(12).fill(50000),
    fotPessimistic: new Array(12).fill(70000),
    taxMode: 'optimistic',
    customTaxRate: 15,
    messageCarryoverLimit: 3
  };

  const testClients: ClientsData = {
    newClients75: [10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
    newClients150: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    newClients250: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    newClients500: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    newClients1000: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    subscriptionPrice75: 75,
    subscriptionPrice150: 150,
    subscriptionPrice250: 250,
    subscriptionPrice500: 500,
    subscriptionPrice1000: 1000,
    messages75: 1000,
    messages150: 2500,
    messages250: 5000,
    messages500: 12500,
    messages1000: 30000
  };

  const emptyUpsell: UpsellSettings = {
    additionalBotsPercentage: 0,
    additionalBotsPrice: 0,
    newFeaturesPercentage: 0,
    newFeaturesPrice: 0,
    messagePacksPercentage: 0,
    messagePacksPrice: 0,
    integrationsPercentage: 0,
    integrationsPrice: 0
  };

  it('–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú–´: –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö % –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', () => {
    console.log('\nüî¥ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° % –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô\n');
    
    const usageRates = [30, 50, 70, 90, 110, 130, 150];
    const results: any[] = [];
    
    usageRates.forEach(rate => {
      const params = { ...baseParams, messageUsageRate: rate };
      const { result } = renderHook(() => useFinancialModel(params, testClients, emptyUpsell));
      
      act(() => {
        result.current.calculateFinancialModel();
      });
      
      const totalData = result.current.totalData;
      const monthlyData = result.current.monthlyData;
      
      // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞ –≥–æ–¥
      let totalPackagesPurchased = 0;
      let totalAdditionalMessages = 0;
      
      monthlyData.forEach((month, index) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫—É–ø–∏–ª–∏ –ø–∞–∫–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        const buyingClients = Math.floor(month.subscriptionRevenue75 / testClients.subscriptionPrice75);
        totalPackagesPurchased += buyingClients;
        totalAdditionalMessages += month.additionalMessages75;
      });
      
      results.push({
        rate,
        totalRevenue: totalData.totalRevenue,
        subscriptionRevenue: totalData.totalSubscription,
        additionalMessagesRevenue: totalData.totalAdditionalMessagesRevenue,
        totalProfit: totalData.totalNetProfit,
        totalPackagesPurchased,
        totalAdditionalMessages,
        avgMonthlyProfit: totalData.avgMonthlyProfit
      });
    });
    
    // –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.table(results);
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –ü–û–í–ï–î–ï–ù–ò–Ø:');
    
    for (let i = 1; i < results.length; i++) {
      const prev = results[i - 1];
      const curr = results[i];
      
      console.log(`\n${prev.rate}% ‚Üí ${curr.rate}%:`);
      console.log(`  –ü–æ–∫—É–ø–æ–∫ –ø–∞–∫–µ—Ç–æ–≤: ${prev.totalPackagesPurchased} ‚Üí ${curr.totalPackagesPurchased} (${curr.totalPackagesPurchased - prev.totalPackagesPurchased >= 0 ? '+' : ''}${curr.totalPackagesPurchased - prev.totalPackagesPurchased})`);
      console.log(`  –í—ã—Ä—É—á–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫: $${prev.subscriptionRevenue.toFixed(0)} ‚Üí $${curr.subscriptionRevenue.toFixed(0)} (${curr.subscriptionRevenue - prev.subscriptionRevenue >= 0 ? '+' : ''}$${(curr.subscriptionRevenue - prev.subscriptionRevenue).toFixed(0)})`);
      console.log(`  –î–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏—è: ${prev.totalAdditionalMessages} ‚Üí ${curr.totalAdditionalMessages} (${curr.totalAdditionalMessages - prev.totalAdditionalMessages >= 0 ? '+' : ''}${curr.totalAdditionalMessages - prev.totalAdditionalMessages})`);
      console.log(`  –í—ã—Ä—É—á–∫–∞ –¥–æ–ø. —Å–æ–æ–±—â.: $${prev.additionalMessagesRevenue.toFixed(0)} ‚Üí $${curr.additionalMessagesRevenue.toFixed(0)} (${curr.additionalMessagesRevenue - prev.additionalMessagesRevenue >= 0 ? '+' : ''}$${(curr.additionalMessagesRevenue - prev.additionalMessagesRevenue).toFixed(0)})`);
      console.log(`  –û–ë–©–ê–Ø –ü–†–ò–ë–´–õ–¨: $${prev.totalProfit.toFixed(0)} ‚Üí $${curr.totalProfit.toFixed(0)} (${curr.totalProfit - prev.totalProfit >= 0 ? '+' : ''}$${(curr.totalProfit - prev.totalProfit).toFixed(0)})`);
      
      if (curr.totalProfit < prev.totalProfit) {
        console.log(`  ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏–±—ã–ª—å —É–ø–∞–ª–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!`);
      }
    }
  });

  it('–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏', () => {
    console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• 3 –ú–ï–°–Ø–¶–ï–í\n');
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–∏–∑–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (40%)
    const lowUsageParams = { ...baseParams, messageUsageRate: 40 };
    const { result: lowResult } = renderHook(() => useFinancialModel(lowUsageParams, testClients, emptyUpsell));
    
    act(() => {
      lowResult.current.calculateFinancialModel();
    });
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (120%)
    const highUsageParams = { ...baseParams, messageUsageRate: 120 };
    const { result: highResult } = renderHook(() => useFinancialModel(highUsageParams, testClients, emptyUpsell));
    
    act(() => {
      highResult.current.calculateFinancialModel();
    });
    
    console.log('–°–¶–ï–ù–ê–†–ò–ô 1: 40% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    console.log('=====================================');
    for (let i = 0; i < 3; i++) {
      const month = lowResult.current.monthlyData[i];
      console.log(`\n–ú–µ—Å—è—Ü ${i + 1}:`);
      console.log(`  –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${month.activeClients75}`);
      console.log(`  –ù–∞–∫–æ–ø–ª–µ–Ω–æ —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞: ${i === 0 ? 0 : lowResult.current.monthlyData[i-1].unusedMessages75}`);
      console.log(`  –ù—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç: ${month.unusedMessages75 < month.activeClients75 * 1000 ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`  –ö—É–ø—è—Ç –ø–∞–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: ${Math.floor(month.subscriptionRevenue75 / 75)}`);
      console.log(`  –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${month.availableMessages75}`);
      console.log(`  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${month.usedMessages75} (${40}% –æ—Ç ${month.activeClients75 * 1000})`);
      console.log(`  –û—Å—Ç–∞–ª–æ—Å—å: ${month.availableMessages75 - month.usedMessages75}`);
      console.log(`  –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥. –º–µ—Å—è—Ü: ${month.unusedMessages75}`);
      console.log(`  –í—ã—Ä—É—á–∫–∞ –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫: $${month.subscriptionRevenue75}`);
    }
    
    console.log('\n\n–°–¶–ï–ù–ê–†–ò–ô 2: 120% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    console.log('=====================================');
    for (let i = 0; i < 3; i++) {
      const month = highResult.current.monthlyData[i];
      console.log(`\n–ú–µ—Å—è—Ü ${i + 1}:`);
      console.log(`  –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${month.activeClients75}`);
      console.log(`  –ù–∞–∫–æ–ø–ª–µ–Ω–æ —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞: ${i === 0 ? 0 : highResult.current.monthlyData[i-1].unusedMessages75}`);
      console.log(`  –ù—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç: ${month.unusedMessages75 < month.activeClients75 * 1000 ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`  –ö—É–ø—è—Ç –ø–∞–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: ${Math.floor(month.subscriptionRevenue75 / 75)}`);
      console.log(`  –î–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${month.availableMessages75}`);
      console.log(`  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${month.usedMessages75} (${120}% –æ—Ç ${month.activeClients75 * 1000})`);
      console.log(`  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${month.additionalMessages75}`);
      console.log(`  –í—ã—Ä—É—á–∫–∞ –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫: $${month.subscriptionRevenue75}`);
      console.log(`  –í—ã—Ä—É—á–∫–∞ –æ—Ç –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏–π: $${month.additionalMessages75Revenue}`);
    }
    
    console.log('\n\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –ò–¢–û–ì–û–í:');
    console.log(`40% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $${lowResult.current.totalData.totalNetProfit.toFixed(0)}`);
    console.log(`120% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $${highResult.current.totalData.totalNetProfit.toFixed(0)}`);
    console.log(`–†–∞–∑–Ω–∏—Ü–∞: $${(highResult.current.totalData.totalNetProfit - lowResult.current.totalData.totalNetProfit).toFixed(0)}`);
  });

  it('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏', () => {
    console.log('\nüõí –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –ü–û–ö–£–ü–ö–ò –ü–ê–ö–ï–¢–û–í\n');
    
    // –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
    const veryLowUsageParams = { ...baseParams, messageUsageRate: 10 }; // 10% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const { result } = renderHook(() => useFinancialModel(veryLowUsageParams, testClients, emptyUpsell));
    
    act(() => {
      result.current.calculateFinancialModel();
    });
    
    const monthlyData = result.current.monthlyData;
    
    monthlyData.forEach((month, index) => {
      console.log(`\n–ú–µ—Å—è—Ü ${index + 1}:`);
      console.log(`  –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${month.activeClients75}`);
      console.log(`  –ù–∞–∫–æ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${index === 0 ? 0 : monthlyData[index-1].unusedMessages75}`);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç
      const previousUnused = index === 0 ? 0 : monthlyData[index-1].unusedMessages75;
      const neededMessages = month.activeClients75 * 1000; // –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –Ω–∞ –º–µ—Å—è—Ü
      const needNewPackage = previousUnused < neededMessages;
      
      console.log(`  –ù—É–∂–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º–µ—Å—è—Ü: ${neededMessages}`);
      console.log(`  –ù—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç? ${needNewPackage ? '–î–ê' : '–ù–ï–¢'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫—É–ø–∏–ª–∏ –ø–∞–∫–µ—Ç
      const buyingClients = Math.floor(month.subscriptionRevenue75 / 75);
      console.log(`  –ö—É–ø–∏–ª–∏ –ø–∞–∫–µ—Ç: ${buyingClients} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
      console.log(`  –í—ã—Ä—É—á–∫–∞ –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫: $${month.subscriptionRevenue75}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
      if (needNewPackage && buyingClients !== month.activeClients75) {
        console.log(`  ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –î–æ–ª–∂–Ω—ã –±—ã–ª–∏ –∫—É–ø–∏—Ç—å –≤—Å–µ ${month.activeClients75}, –∞ –∫—É–ø–∏–ª–∏ ${buyingClients}`);
      } else if (!needNewPackage && buyingClients > 0) {
        const expectedBuying = Math.max(0, month.activeClients75 - Math.floor(previousUnused / 1000));
        console.log(`  üí° –û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–∫—É–ø–æ–∫: ${expectedBuying}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏: ${buyingClients}`);
      }
    });
  });
});