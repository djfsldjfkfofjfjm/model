import React, { useState } from 'react';
import { useFinancialContext } from '../../contexts/FinancialContext';
import { 
  GrowthCurveEditor, 
  SmartGrowthSliders, 
  VisualPatternInput,
  InfoTooltip,
  EditableCell
} from '../common';

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –§–û–¢ —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –≤–≤–æ–¥–∞
 */
const ModernFOTEditor: React.FC = () => {
  const {
    fotMode,
    setFotMode,
    fotOptimistic,
    setFotOptimistic,
    fotPessimistic,
    setFotPessimistic,
  } = useFinancialContext();

  const [inputMode, setInputMode] = useState<'curve' | 'sliders' | 'patterns'>('curve');
  const [showBreakdown, setShowBreakdown] = useState(false);
  const [breakdown, setBreakdown] = useState({
    development: 60,
    sales: 25,
    admin: 15
  });
  
  const [lockedValues, setLockedValues] = useState({
    development: false,
    sales: false,
    admin: false
  });

  const currentFot = fotMode === 'optimistic' ? fotOptimistic : fotPessimistic;
  const setCurrentFot = fotMode === 'optimistic' ? setFotOptimistic : setFotPessimistic;

  // –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤
  const applyStartupPreset = (stage: 'seed' | 'series-a' | 'growth') => {
    const presets = {
      seed: {
        name: 'Seed —Å—Ç–∞–¥–∏—è',
        optimistic: [500, 800, 1000, 1200, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000],
        pessimistic: [500, 1000, 1500, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 9000]
      },
      'series-a': {
        name: 'Series A',
        optimistic: [5000, 6000, 7000, 8000, 10000, 12000, 15000, 18000, 20000, 25000, 30000, 35000],
        pessimistic: [5000, 7000, 9000, 12000, 15000, 18000, 22000, 26000, 30000, 35000, 40000, 45000]
      },
      growth: {
        name: '–°—Ç–∞–¥–∏—è —Ä–æ—Å—Ç–∞',
        optimistic: [20000, 22000, 25000, 28000, 32000, 36000, 40000, 45000, 50000, 55000, 60000, 65000],
        pessimistic: [20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 70000, 80000, 90000]
      }
    };

    const preset = presets[stage];
    setFotOptimistic(preset.optimistic);
    setFotPessimistic(preset.pessimistic);
  };

  const getBreakdownValues = () => {
    return currentFot.map(total => ({
      development: Math.round(total * breakdown.development / 100),
      sales: Math.round(total * breakdown.sales / 100),
      admin: Math.round(total * breakdown.admin / 100)
    }));
  };

  const updateBreakdown = (department: 'development' | 'sales' | 'admin', value: number) => {
    const newBreakdown = { ...breakdown };
    newBreakdown[department] = Math.max(0, Math.min(100, value));
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã (–∏—Å–∫–ª—é—á–∞—è –∏–∑–º–µ–Ω—è–µ–º—ã–π)
    const allDepts = ['development', 'sales', 'admin'] as const;
    const unlockedOtherDepts = allDepts.filter(d => d !== department && !lockedValues[d]);
    const lockedOtherDepts = allDepts.filter(d => d !== department && lockedValues[d]);
    
    // –°—É–º–º–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const lockedSum = lockedOtherDepts.reduce((sum, dept) => sum + newBreakdown[dept], 0);
    const remainingForUnlocked = 100 - newBreakdown[department] - lockedSum;
    
    if (unlockedOtherDepts.length > 0 && remainingForUnlocked >= 0) {
      // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–∂–¥—É –Ω–µ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏
      const currentUnlockedSum = unlockedOtherDepts.reduce((sum, dept) => sum + newBreakdown[dept], 0);
      
      if (currentUnlockedSum > 0) {
        // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–µ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ
        const scale = remainingForUnlocked / currentUnlockedSum;
        unlockedOtherDepts.forEach(dept => {
          newBreakdown[dept] = Math.round(newBreakdown[dept] * scale);
        });
      } else {
        // –ï—Å–ª–∏ –≤—Å–µ –Ω–µ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –±—ã–ª–∏ 0, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≤–Ω—É
        const equalShare = Math.floor(remainingForUnlocked / unlockedOtherDepts.length);
        unlockedOtherDepts.forEach((dept, index) => {
          newBreakdown[dept] = equalShare + (index === 0 ? remainingForUnlocked % unlockedOtherDepts.length : 0);
        });
      }
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
      const finalSum = Object.values(newBreakdown).reduce((sum, val) => sum + val, 0);
      if (finalSum !== 100 && unlockedOtherDepts.length > 0) {
        const diff = 100 - finalSum;
        newBreakdown[unlockedOtherDepts[0]] += diff;
      }
    } else if (remainingForUnlocked < 0) {
      // –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω—è–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      newBreakdown[department] = 100 - lockedSum;
    }
    
    setBreakdown(newBreakdown);
  };

  const toggleLock = (department: 'development' | 'sales' | 'admin') => {
    setLockedValues(prev => ({
      ...prev,
      [department]: !prev[department]
    }));
  };

  return (
    <div className="bg-white p-6 rounded-2xl shadow-sm border border-gray-100">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-xl font-bold text-indigo-600 flex items-center">
          –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –§–û–¢
          <InfoTooltip
            content="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ–Ω–¥–∞ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞"
            position="right"
          />
        </h2>
        <div className="flex gap-2">
          <button
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
              fotMode === 'optimistic'
                ? 'bg-green-500 text-white shadow-sm'
                : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-200'
            }`}
            onClick={() => setFotMode('optimistic')}
          >
            üòä –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π
          </button>
          <button
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
              fotMode === 'pessimistic'
                ? 'bg-orange-500 text-white shadow-sm'
                : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-200'
            }`}
            onClick={() => setFotMode('pessimistic')}
          >
            üò∞ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π
          </button>
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ */}
      <div className="mb-6 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg">
        <h4 className="text-sm font-medium text-gray-700 mb-3">üöÄ –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤</h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          <button
            onClick={() => applyStartupPreset('seed')}
            className="p-3 bg-white rounded-lg hover:bg-gray-50 text-left border border-purple-200"
          >
            <div className="font-medium mb-1">üå± Seed —Å—Ç–∞–¥–∏—è</div>
            <div className="text-xs space-y-1">
              <div className="text-green-600">–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: $500 ‚Üí $5K</div>
              <div className="text-orange-600">–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: $500 ‚Üí $9K</div>
              <div className="text-gray-500">–†–æ—Å—Ç –∑–∞ –≥–æ–¥: 10-18x</div>
            </div>
          </button>
          <button
            onClick={() => applyStartupPreset('series-a')}
            className="p-3 bg-white rounded-lg hover:bg-gray-50 text-left border border-purple-200"
          >
            <div className="font-medium mb-1">üéØ Series A</div>
            <div className="text-xs space-y-1">
              <div className="text-green-600">–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: $5K ‚Üí $35K</div>
              <div className="text-orange-600">–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: $5K ‚Üí $45K</div>
              <div className="text-gray-500">–†–æ—Å—Ç –∑–∞ –≥–æ–¥: 7-9x</div>
            </div>
          </button>
          <button
            onClick={() => applyStartupPreset('growth')}
            className="p-3 bg-white rounded-lg hover:bg-gray-50 text-left border border-purple-200"
          >
            <div className="font-medium mb-1">üìà Growth —Å—Ç–∞–¥–∏—è</div>
            <div className="text-xs space-y-1">
              <div className="text-green-600">–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: $20K ‚Üí $65K</div>
              <div className="text-orange-600">–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: $20K ‚Üí $90K</div>
              <div className="text-gray-500">–†–æ—Å—Ç –∑–∞ –≥–æ–¥: 3.2-4.5x</div>
            </div>
          </button>
        </div>
        <div className="mt-3 text-xs text-gray-600 text-center">
          –ü—Ä–µ—Å–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö —Ä–æ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–∞
        </div>
      </div>

      {/* –†–µ–∂–∏–º—ã –≤–≤–æ–¥–∞ */}
      <div className="mb-6 border-b border-gray-200">
        <div className="flex gap-4">
          <button
            onClick={() => setInputMode('curve')}
            className={`pb-2 px-1 font-medium transition-all ${
              inputMode === 'curve'
                ? 'text-indigo-600 border-b-2 border-indigo-600'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            üìà –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–≤–æ–π
          </button>
          <button
            onClick={() => setInputMode('sliders')}
            className={`pb-2 px-1 font-medium transition-all ${
              inputMode === 'sliders'
                ? 'text-indigo-600 border-b-2 border-indigo-600'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            üéöÔ∏è –£–º–Ω—ã–µ —Å–ª–∞–π–¥–µ—Ä—ã
          </button>
          <button
            onClick={() => setInputMode('patterns')}
            className={`pb-2 px-1 font-medium transition-all ${
              inputMode === 'patterns'
                ? 'text-indigo-600 border-b-2 border-indigo-600'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            üé® –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
          </button>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ */}
      <div className="mb-6">
        {inputMode === 'curve' && (
          <GrowthCurveEditor
            values={currentFot}
            onChange={setCurrentFot}
            min={0}
            max={100000}
            title={`–§–û–¢ - ${fotMode === 'optimistic' ? '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π' : '–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'} —Å—Ü–µ–Ω–∞—Ä–∏–π`}
            color={fotMode === 'optimistic' ? '#10B981' : '#F97316'}
            showPresets={false}
          />
        )}
        
        {inputMode === 'sliders' && (
          <SmartGrowthSliders
            values={currentFot}
            onChange={setCurrentFot}
            min={0}
            max={100000}
            title={`–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –§–û–¢ - ${fotMode === 'optimistic' ? '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π' : '–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'}`}
          />
        )}
        
        {inputMode === 'patterns' && (
          <VisualPatternInput
            values={currentFot}
            onChange={setCurrentFot}
            min={0}
            max={100000}
            title={`–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–æ—Å—Ç–∞ –§–û–¢ - ${fotMode === 'optimistic' ? '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π' : '–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'}`}
          />
        )}
      </div>

      {/* –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –§–û–¢ */}
      <div className="mb-6">
        <button
          onClick={() => setShowBreakdown(!showBreakdown)}
          className="flex items-center gap-2 text-sm font-medium text-indigo-600 hover:text-indigo-800"
        >
          <span>{showBreakdown ? 'üìä' : 'üìà'}</span>
          {showBreakdown ? '–°–∫—Ä—ã—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é' : '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –ø–æ –æ—Ç–¥–µ–ª–∞–º'}
        </button>
        
        {showBreakdown && (
          <div className="mt-4 space-y-3">
            <div className="grid grid-cols-3 gap-4 text-sm">
              <div className="bg-purple-50 p-3 rounded-lg">
                <div className="font-medium text-purple-800 flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span>üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞</span>
                    <button
                      onClick={() => toggleLock('development')}
                      className={`text-xs px-1 py-1 rounded transition-colors ${
                        lockedValues.development 
                          ? 'text-red-600 hover:text-red-700' 
                          : 'text-gray-400 hover:text-gray-600'
                      }`}
                      title={lockedValues.development ? '–û—Ç–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ' : '–ó–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ'}
                    >
                      {lockedValues.development ? 'üîí' : 'üîì'}
                    </button>
                  </div>
                  <div className="flex items-center gap-1">
                    <EditableCell
                      value={breakdown.development}
                      onChange={(value) => updateBreakdown('development', value)}
                      min={0}
                      max={100}
                      step={1}
                      disabled={lockedValues.development}
                    />
                    <span className="text-purple-600">%</span>
                  </div>
                </div>
                <div className="text-xs text-gray-600 mt-1">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, DevOps, QA</div>
              </div>
              <div className="bg-blue-50 p-3 rounded-lg">
                <div className="font-medium text-blue-800 flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span>üíº –ü—Ä–æ–¥–∞–∂–∏</span>
                    <button
                      onClick={() => toggleLock('sales')}
                      className={`text-xs px-1 py-1 rounded transition-colors ${
                        lockedValues.sales 
                          ? 'text-red-600 hover:text-red-700' 
                          : 'text-gray-400 hover:text-gray-600'
                      }`}
                      title={lockedValues.sales ? '–û—Ç–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ' : '–ó–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ'}
                    >
                      {lockedValues.sales ? 'üîí' : 'üîì'}
                    </button>
                  </div>
                  <div className="flex items-center gap-1">
                    <EditableCell
                      value={breakdown.sales}
                      onChange={(value) => updateBreakdown('sales', value)}
                      min={0}
                      max={100}
                      step={1}
                      disabled={lockedValues.sales}
                    />
                    <span className="text-blue-600">%</span>
                  </div>
                </div>
                <div className="text-xs text-gray-600 mt-1">Sales, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ø–æ–¥–¥–µ—Ä–∂–∫–∞</div>
              </div>
              <div className="bg-gray-50 p-3 rounded-lg">
                <div className="font-medium text-gray-800 flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span>üìã –ê–¥–º–∏–Ω</span>
                    <button
                      onClick={() => toggleLock('admin')}
                      className={`text-xs px-1 py-1 rounded transition-colors ${
                        lockedValues.admin 
                          ? 'text-red-600 hover:text-red-700' 
                          : 'text-gray-400 hover:text-gray-600'
                      }`}
                      title={lockedValues.admin ? '–û—Ç–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ' : '–ó–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ'}
                    >
                      {lockedValues.admin ? 'üîí' : 'üîì'}
                    </button>
                  </div>
                  <div className="flex items-center gap-1">
                    <EditableCell
                      value={breakdown.admin}
                      onChange={(value) => updateBreakdown('admin', value)}
                      min={0}
                      max={100}
                      step={1}
                      disabled={lockedValues.admin}
                    />
                    <span className="text-gray-600">%</span>
                  </div>
                </div>
                <div className="text-xs text-gray-600 mt-1">HR, —Ñ–∏–Ω–∞–Ω—Å—ã, –æ–ø–µ—Ä–∞—Ü–∏–∏</div>
              </div>
            </div>
            <div className="mt-2 text-xs text-gray-500 text-center space-y-1">
              <div>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üîí/üîì –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π.</div>
              <div>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –¥—Ä—É–≥–∏—Ö –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤.</div>
            </div>
            
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-2">–ú–µ—Å—è—Ü</th>
                    <th className="text-right py-2">–í—Å–µ–≥–æ</th>
                    <th className="text-right py-2 text-purple-700">–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞</th>
                    <th className="text-right py-2 text-blue-700">–ü—Ä–æ–¥–∞–∂–∏</th>
                    <th className="text-right py-2 text-gray-700">–ê–¥–º–∏–Ω</th>
                  </tr>
                </thead>
                <tbody>
                  {getBreakdownValues().slice(0, 3).map((month, index) => (
                    <tr key={index} className="border-b">
                      <td className="py-2">{index + 1}</td>
                      <td className="text-right font-medium">${currentFot[index].toLocaleString()}</td>
                      <td className="text-right text-purple-600">${month.development.toLocaleString()}</td>
                      <td className="text-right text-blue-600">${month.sales.toLocaleString()}</td>
                      <td className="text-right text-gray-600">${month.admin.toLocaleString()}</td>
                    </tr>
                  ))}
                  <tr>
                    <td colSpan={5} className="text-center py-2 text-gray-500">...</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>

      {/* –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <h4 className="text-sm font-medium text-gray-700 mb-3">üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</h4>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <div className="text-green-600 font-medium mb-2">–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π</div>
            <div className="space-y-1">
              <div className="flex justify-between text-sm">
                <span>–ì–æ–¥:</span>
                <span className="font-medium">${fotOptimistic.reduce((a, b) => a + b, 0).toLocaleString()}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>–°—Ä–µ–¥–Ω–µ–µ:</span>
                <span className="font-medium">${Math.round(fotOptimistic.reduce((a, b) => a + b, 0) / 12).toLocaleString()}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>–†–æ—Å—Ç:</span>
                <span className="font-medium">
                  {Math.round(((fotOptimistic[11] - fotOptimistic[0]) / fotOptimistic[0]) * 100)}%
                </span>
              </div>
            </div>
          </div>
          
          <div>
            <div className="text-orange-600 font-medium mb-2">–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π</div>
            <div className="space-y-1">
              <div className="flex justify-between text-sm">
                <span>–ì–æ–¥:</span>
                <span className="font-medium">${fotPessimistic.reduce((a, b) => a + b, 0).toLocaleString()}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>–°—Ä–µ–¥–Ω–µ–µ:</span>
                <span className="font-medium">${Math.round(fotPessimistic.reduce((a, b) => a + b, 0) / 12).toLocaleString()}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>–†–æ—Å—Ç:</span>
                <span className="font-medium">
                  {Math.round(((fotPessimistic[11] - fotPessimistic[0]) / fotPessimistic[0]) * 100)}%
                </span>
              </div>
            </div>
          </div>
        </div>
        
        <div className="mt-3 pt-3 border-t border-gray-200">
          <div className="flex justify-between text-sm">
            <span>–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏:</span>
            <span className="font-medium text-red-600">
              ${Math.abs(fotPessimistic.reduce((a, b) => a + b, 0) - fotOptimistic.reduce((a, b) => a + b, 0)).toLocaleString()}
            </span>
          </div>
        </div>
      </div>

      {/* –°–æ–≤–µ—Ç—ã */}
      <div className="mt-4 p-3 bg-blue-50 rounded-lg">
        <p className="text-xs text-blue-800">
          üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –§–û–¢ —Å —É—á—ë—Ç–æ–º –Ω–∞–π–º–∞. –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞–Ω—è—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞, 
          –∑–∞–ª–æ–∂–∏—Ç–µ —Ä–æ—Å—Ç –§–û–¢ –Ω–∞—á–∏–Ω–∞—è —Å 4-–≥–æ –º–µ—Å—è—Ü–∞.
        </p>
      </div>
    </div>
  );
};

export default ModernFOTEditor;