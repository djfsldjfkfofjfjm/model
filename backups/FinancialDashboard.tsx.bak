import React, { useState, useEffect, useCallback, ReactElement } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, 
  AreaChart, Area, ComposedChart, Bar, Scatter, PieChart, Pie, Cell, RadarChart } from 'recharts';

const FinancialDashboard = (): ReactElement => {
  const [activeTab, setActiveTab] = useState('dashboard');
  
  // Базовые параметры модели
  const [taxMode, setTaxMode] = useState('optimistic'); // optimistic = 9% (ПВТ), pessimistic = 35%
  const [fotMode, setFotMode] = useState('optimistic'); // optimistic = базовые расходы, pessimistic = повышенные расходы
  const [apiCost, setApiCost] = useState(30); // % от выручки подписки
  const [churnRate, setChurnRate] = useState(2); // % оттока клиентов в месяц
  
  // Новые клиенты (приход по месяцам)
  const [newClients75, setNewClients75] = useState([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); // Начинаем с 0 клиентов
  const [newClients150, setNewClients150] = useState([0, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3]);
  const [newClients250, setNewClients250] = useState([3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2]); // Начинаем с 3 клиентов
  const [newClients500, setNewClients500] = useState([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
  const [newClients1000, setNewClients1000] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); // Пока нет клиентов этого типа
  
  // Цены пакетов сообщений (бывшие подписочные цены)
  const [subscriptionPrice75, setSubscriptionPrice75] = useState(75); // Новый тариф API-only
  const [subscriptionPrice150, setSubscriptionPrice150] = useState(150);
  const [subscriptionPrice250, setSubscriptionPrice250] = useState(250);
  const [subscriptionPrice500, setSubscriptionPrice500] = useState(500);
  const [subscriptionPrice1000, setSubscriptionPrice1000] = useState(1000);
  
  // Параметры модели пакетов сообщений
  // Фиксированное количество сообщений для разных тарифов
  const [messages75, setMessages75] = useState(105); // Количество сообщений для тарифа $75
  const [messages150, setMessages150] = useState(210); // Количество сообщений для тарифа $150
  const [messages250, setMessages250] = useState(350); // Количество сообщений для тарифа $250
  const [messages500, setMessages500] = useState(700); // Количество сообщений для тарифа $500
  const [messages1000, setMessages1000] = useState(1400); // Количество сообщений для тарифа $1000
  const [messageUsageRate, setMessageUsageRate] = useState(80);
  const [carryOverPercentage, setCarryOverPercentage] = useState(100);
  const [additionalMessagePrice, setAdditionalMessagePrice] = useState(0.30);
  
  // Стоимость интеграции и связанные расходы
  const [integrationPrice, setIntegrationPrice] = useState(500);
  const [cacPercentage, setCacPercentage] = useState(50); // % от внедрения на CAC
  const [implementationPercentage, setImplementationPercentage] = useState(20); // % от внедрения на имплементацию
  const [apiCostPercentage, setApiCostPercentage] = useState(30); // % от выручки на API
  
  // Декомпозиция CAC
  const [partnerCommissionRate, setPartnerCommissionRate] = useState(40); // % от внедрения на комиссии партнерам
  const [salesTeamPercentage, setSalesTeamPercentage] = useState(10); // % от выручки на зарплату продаж
  const [marketingPercentage, setMarketingPercentage] = useState(5); // % от внедрения на маркетинг и рекламу
  const [leadGenerationPerClient, setLeadGenerationPerClient] = useState(20); // $ на лид для каждого нового клиента
  
  // Параметры для декомпозиции Upsell
  // 1. Дополнительные боты
  const [additionalBotsRate, setAdditionalBotsRate] = useState(2); // % клиентов в месяц
  const [additionalBotsPrice, setAdditionalBotsPrice] = useState(100); // Средний чек
  
  // 2. Новые функции
  const [newFeaturesRate, setNewFeaturesRate] = useState(1.5); // % клиентов в месяц
  const [newFeaturesPrice, setNewFeaturesPrice] = useState(75); // Средний чек
  
  // 3. Расширение объема сообщений
  const [messageExpansionRate, setMessageExpansionRate] = useState(3); // % клиентов в месяц
  const [messageExpansionPrice, setMessageExpansionPrice] = useState(50); // Средний чек
  
  // 4. Дополнительные интеграции
  const [additionalIntegrationsRate, setAdditionalIntegrationsRate] = useState(0.8); // % клиентов в месяц
  const [additionalIntegrationsPrice, setAdditionalIntegrationsPrice] = useState(150); // Средний чек
  
  // Общие параметры upsell (для обратной совместимости)
  const [monthlyUpsellRate, setMonthlyUpsellRate] = useState(5); // % клиентов с upsell в месяц (суммарно)
  const [averageUpsellIncrease, setAverageUpsellIncrease] = useState(50); // % увеличения подписки при upsell
  
  // Значения ФОТ по месяцам (обновлено согласно новым данным)
  const [fotOptimistic, setFotOptimistic] = useState([500, 1000, 1000, 1700, 1700, 1700, 2700, 2700, 2700, 4000, 4000, 4000]);
  const [fotPessimistic, setFotPessimistic] = useState([500, 1000, 1000, 2700, 2700, 2700, 4000, 4000, 4000, 6000, 6000, 6000]);
  
  // Налоговые ставки (смена режима)
  const [taxRateOptimistic, setTaxRateOptimistic] = useState(9); // ПВТ
  const [taxRatePessimistic, setTaxRatePessimistic] = useState(35); // ООО общая
  
  // Пользовательские настройки
  const [maxImplementationCost, setMaxImplementationCost] = useState(200);
  
  // Результаты расчетов
  const [monthlyData, setMonthlyData] = useState<any[]>([]);
  const [totalData, setTotalData] = useState<any>({});
  
  // Форматирование валюты
  const formatCurrency = (value: any): string => {
    if (typeof value !== 'number') return '$0';
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(value);
  };
  
  // Современные цвета для визуализаций в стиле awwwards
  const theme = {
    dark: '#0F172A',
    primary: '#6366F1',
    secondary: '#EC4899',
    accent: '#F59E0B',
    success: '#10B981',
    warning: '#FBBF24',
    danger: '#EF4444',
    light: '#F8FAFC',
    darkGray: '#334155',
    mediumGray: '#64748B',
    lightGray: '#E2E8F0',
    background: '#F1F5F9',
    clients: {
      primary: '#6366F1',
      secondary: '#818CF8'
    },
    income: {
      primary: '#10B981',
      secondary: '#34D399'
    },
    profit: {
      primary: '#F59E0B',
      secondary: '#FBBF24'
    },
    tooltipBackground: 'rgba(255, 255, 255, 0.9)'
  };

  // Обработчик изменения максимального значения имплементации
  const handleMaxImplementationChange = (value: number) => {
    if (value === 0) {
      setMaxImplementationCost(200);
    }
  };
  
  // Компонент для редактирования параметров
  const EditableCell = ({ value, onChange, min = 0, max = 100, step = 1 }: { 
    value: number; 
    onChange: (value: number) => void; 
    min?: number; 
    max?: number; 
    step?: number;
  }) => {
    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      const newValue = parseFloat(e.target.value);
      if (!isNaN(newValue) && newValue >= min && newValue <= max) {
        onChange(newValue);
      }
    };
    
    return (
      <input
        type="number"
        value={value}
        onChange={handleChange}
        min={min}
        max={max}
        step={step}
        className="w-full rounded-md border border-gray-300 p-2 text-gray-800 focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500 text-center"
      />
    );
  };
  
  // Основной расчет финансовой модели
  const calculateFinancialModel = useCallback(() => {
    let data = [];
    
    // Рассчитываем активных клиентов и финансовые показатели по месяцам
    let activeClients75 = 0;
    let activeClients150 = 0;
    let activeClients250 = 0;
    let activeClients500 = 0;
    let activeClients1000 = 0;
    
    // Для расчета NRR и upsell
    let startingMRR = 0;
    let expansionMRR = 0; // Доход от upsell/cross-sell
    let churnedMRR = 0; // Потерянный доход от оттока
    
    // Накопительные итоги
    let totalIntegration = 0;
    let totalSubscription = 0;
    let totalAdditionalMessagesRevenue = 0;
    let totalApiCosts = 0;
    let totalCacCosts = 0;
    // Накопительные суммы для компонентов CAC
    let totalPartnerCommissions = 0;
    let totalSalesTeamCosts = 0;
    let totalMarketingCosts = 0;
    let totalLeadGenerationCosts = 0;
    let totalImplementationCosts = 0;
    let totalFotCosts = 0;
    let totalGrossProfit = 0;
    let totalTax = 0;
    let totalNetProfit = 0;
    
    // Расчет дополнительной метрики для LTV
    let monthlyRevenueSum = 0;
    
    // Значение для расчета отточенных клиентов
    let churnedClientsTotal = 0;
    
    // Цикл по 12 месяцам
    for (let month = 0; month < 12; month++) {
      // Обновляем количество активных клиентов (с учетом оттока)
      if (month > 0) {
        // Рассчитываем отток для каждого типа клиентов
        const churn75 = Math.round(activeClients75 * (churnRate / 100));
        const churn150 = Math.round(activeClients150 * (churnRate / 100));
        const churn250 = Math.round(activeClients250 * (churnRate / 100));
        const churn500 = Math.round(activeClients500 * (churnRate / 100));
        const churn1000 = Math.round(activeClients1000 * (churnRate / 100));
        
        // Суммарное количество оттока за текущий месяц
        const monthlyChurn = churn75 + churn150 + churn250 + churn500 + churn1000;
        churnedClientsTotal += monthlyChurn;
        
        // Обновляем активных клиентов с учетом оттока
        activeClients75 = activeClients75 - churn75 + newClients75[month];
        activeClients150 = activeClients150 - churn150 + newClients150[month];
        activeClients250 = activeClients250 - churn250 + newClients250[month];
        activeClients500 = activeClients500 - churn500 + newClients500[month];
        activeClients1000 = activeClients1000 - churn1000 + newClients1000[month];
      } else {
        // Первый месяц - просто добавляем новых клиентов
        activeClients75 += newClients75[month];
        activeClients150 += newClients150[month];
        activeClients250 += newClients250[month];
        activeClients500 += newClients500[month];
        activeClients1000 += newClients1000[month];
      }
      
      // Рассчитываем общее количество новых клиентов за текущий месяц
      const totalNewClients = newClients75[month] + newClients150[month] + 
                              newClients250[month] + newClients500[month] + newClients1000[month];
                              
      const totalActiveClients = activeClients75 + activeClients150 + activeClients250 + 
                                 activeClients500 + activeClients1000;
      
      // Расчет доходов
      const integrationRevenue = totalNewClients * integrationPrice;
      
      // Базовая выручка от пакетов сообщений (бывшая subscriptionRevenue)
      const subscriptionRevenue = 
        activeClients75 * subscriptionPrice75 +
        activeClients150 * subscriptionPrice150 +
        activeClients250 * subscriptionPrice250 + 
        activeClients500 * subscriptionPrice500 + 
        activeClients1000 * subscriptionPrice1000;
      
      // Расчет общего количества сообщений по тарифам
      const totalMessages75 = activeClients75 * messages75;
      const totalMessages150 = activeClients150 * messages150;
      const totalMessages250 = activeClients250 * messages250;
      const totalMessages500 = activeClients500 * messages500;
      const totalMessages1000 = activeClients1000 * messages1000;
      
      // Общее количество сообщений во всех пакетах
      const totalMessagesInPackages = totalMessages75 + totalMessages150 + totalMessages250 + totalMessages500 + totalMessages1000;
      
      // Расчет использования сообщений
      const usedMessages = Math.floor(totalMessagesInPackages * messageUsageRate / 100);
      const unusedMessages = totalMessagesInPackages - usedMessages;
      const carriedOverMessages = Math.floor(unusedMessages * carryOverPercentage / 100);
      
      // Дополнительные сообщения (если использовано больше, чем включено в пакет)
      // На самом деле этого не должно происходить, так как usedMessages почти всегда меньше totalMessagesInPackages
      const additionalMessagesNeeded = Math.max(0, usedMessages - totalMessagesInPackages);
      const additionalMessagesRevenue = additionalMessagesNeeded * additionalMessagePrice;
      
      const totalRevenue = integrationRevenue + subscriptionRevenue + additionalMessagesRevenue;
      
      // Расчет расходов
      // API затраты (примерно 30% от пакетов)
      const apiCosts = subscriptionRevenue * (apiCostPercentage / 100);
      
      // Себестоимость API рассчитывается как процент от выручки (apiCostPercentage)
      
      // Декомпозиция CAC (расходы на привлечение)
      // 1. Комиссии партнерам - 40% от выручки за интеграцию
      const partnerCommissions = integrationRevenue * (partnerCommissionRate / 100);
      
      // 2. Зарплата продажам - 10% от базовой выручки
      const salesTeamCosts = subscriptionRevenue * (salesTeamPercentage / 100);
      
      // 3. Маркетинг и реклама - 5% от выручки за интеграцию
      const marketingCosts = integrationRevenue * (marketingPercentage / 100);
      
      // 4. Стоимость лидов - фиксированная сумма на каждого нового клиента
      const leadGenerationCosts = totalNewClients * leadGenerationPerClient;
      
      // Итоговый CAC - сумма всех компонентов
      const cacCosts = partnerCommissions + salesTeamCosts + marketingCosts + leadGenerationCosts;
      
      // Доп. расходы на внедрение - ограничены максимумом в 200$ на клиента
      const calculatedImplCosts = integrationPrice * (implementationPercentage / 100);
      const implementationCostsPerClient = Math.min(calculatedImplCosts, maxImplementationCost);
      const implementationCosts = totalNewClients * implementationCostsPerClient;
      
      // ФОТ
      const fotCosts = fotMode === 'optimistic' ? fotOptimistic[month] : fotPessimistic[month];
      
      // Расчёт upsell (декомпозиция по типам)
      
      // 1. Дополнительные боты
      // Используем уже рассчитанный totalActiveClients из строки выше
      const additionalBotsRevenue = totalActiveClients * (additionalBotsRate / 100) * additionalBotsPrice;
      
      // 2. Новые функции
      const newFeaturesRevenue = totalActiveClients * (newFeaturesRate / 100) * newFeaturesPrice;
      
      // 3. Расширение объема сообщений
      const messageExpansionRevenue = totalActiveClients * (messageExpansionRate / 100) * messageExpansionPrice;
      
      // 4. Дополнительные интеграции
      const additionalIntegrationsRevenue = totalActiveClients * (additionalIntegrationsRate / 100) * additionalIntegrationsPrice;
      
      // Общая выручка от всех типов upsell
      const upsellRevenue = additionalBotsRevenue + newFeaturesRevenue + 
                           messageExpansionRevenue + additionalIntegrationsRevenue;
      
      // NRR расчёты
      if (month === 0) {
        startingMRR = subscriptionRevenue;
      }
      expansionMRR += upsellRevenue;
      
      // Считаем потерянный доход от оттока
      if (month > 0) {
        const monthlyChurn = subscriptionRevenue * (churnRate / 100);
        churnedMRR += monthlyChurn;
      }
      
      // Общие расходы
      const totalExpenses = apiCosts + cacCosts + implementationCosts + fotCosts;
      
      // Валовая прибыль
      const grossProfit = totalRevenue - totalExpenses;
      
      // Налоги
      const taxRate = taxMode === 'optimistic' ? taxRateOptimistic / 100 : taxRatePessimistic / 100;
      const tax = totalRevenue > 0 ? totalRevenue * taxRate : 0;
      
      // Чистая прибыль
      const netProfit = grossProfit - tax;
      
      // Обновляем итоговые показатели
      totalIntegration += integrationRevenue;
      totalSubscription += subscriptionRevenue;
      totalAdditionalMessagesRevenue += additionalMessagesRevenue;
      totalApiCosts += apiCosts;
      totalCacCosts += cacCosts;
      // Накопительные суммы для компонентов CAC
      totalPartnerCommissions += partnerCommissions;
      totalSalesTeamCosts += salesTeamCosts;
      totalMarketingCosts += marketingCosts;
      totalLeadGenerationCosts += leadGenerationCosts;
      totalImplementationCosts += implementationCosts;
      totalFotCosts += fotCosts;
      totalGrossProfit += grossProfit;
      totalTax += tax;
      totalNetProfit += netProfit;
      
      // Для расчета LTV
      monthlyRevenueSum += subscriptionRevenue;
      
      data.push({
        month: month + 1,
        // Клиенты
        newClients75: newClients75[month],
        newClients150: newClients150[month],
        newClients250: newClients250[month],
        newClients500: newClients500[month],
        newClients1000: newClients1000[month],
        churnedClients: churnedClientsTotal,
        activeClients75: activeClients75,
        activeClients150: activeClients150,
        activeClients250: activeClients250,
        activeClients500: activeClients500,
        activeClients1000: activeClients1000,
        totalNewClients: totalNewClients,
        totalActiveClients: totalActiveClients,
        // Доходы
        integrationRevenue: integrationRevenue,
        subscriptionRevenue: subscriptionRevenue,
        additionalMessagesRevenue: additionalMessagesRevenue,
        totalRevenue: totalRevenue,
        // Расходы
        apiCosts: apiCosts,
        cacCosts: cacCosts,
        // Детализация CAC
        partnerCommissions: partnerCommissions,
        salesTeamCosts: salesTeamCosts,
        marketingCosts: marketingCosts,
        leadGenerationCosts: leadGenerationCosts,
        implementationCosts: implementationCosts,
        fotCosts: fotCosts,
        totalExpenses: totalExpenses,
        // Прибыль
        grossProfit: grossProfit,
        tax: tax,
        netProfit: netProfit,
        // Сообщения
        totalMessagesInPackages: totalMessagesInPackages,
        usedMessages: usedMessages,
        unusedMessages: unusedMessages,
        carriedOverMessages: carriedOverMessages,
        additionalMessagesNeeded: additionalMessagesNeeded,
        // Накопительный итог
        cumulativeRevenue: totalIntegration + totalSubscription + totalAdditionalMessagesRevenue,
        cumulativeExpenses: totalApiCosts + totalCacCosts + totalImplementationCosts + totalFotCosts,
        cumulativeProfit: totalNetProfit,
        
        // Декомпозиция Upsell (ЭТАП 6)
        additionalBotsRevenue: additionalBotsRevenue,
        newFeaturesRevenue: newFeaturesRevenue,
        messageExpansionRevenue: messageExpansionRevenue,
        additionalIntegrationsRevenue: additionalIntegrationsRevenue,
        totalUpsellRevenue: upsellRevenue
      });
    }
    
    setMonthlyData(data);
    
    // Устанавливаем итоговые данные
    const totalRevenue = totalIntegration + totalSubscription + totalAdditionalMessagesRevenue;
    const totalExpensesSum = totalApiCosts + totalCacCosts + totalImplementationCosts + totalFotCosts;
    
    // Подсчитываем общее количество оттока за весь период
    const totalChurnedClients = data.reduce((sum, month) => sum + month.churnedClients, 0);
    
    setTotalData({
      totalNewClients: newClients75.reduce((a, b) => a + b, 0) + 
                      newClients150.reduce((a, b) => a + b, 0) + 
                      newClients250.reduce((a, b) => a + b, 0) + 
                      newClients500.reduce((a, b) => a + b, 0) + 
                      newClients1000.reduce((a, b) => a + b, 0),
      finalActiveClients: data[11].totalActiveClients,
      totalChurnedClients: totalChurnedClients,
      totalIntegration: totalIntegration,
      totalSubscription: totalSubscription,
      totalAdditionalMessagesRevenue: totalAdditionalMessagesRevenue,
      totalRevenue: totalRevenue,
      totalApiCosts: totalApiCosts,
      totalCacCosts: totalCacCosts,
      // Детализация CAC
      totalPartnerCommissions: totalPartnerCommissions,
      totalSalesTeamCosts: totalSalesTeamCosts,
      totalMarketingCosts: totalMarketingCosts,
      totalLeadGenerationCosts: totalLeadGenerationCosts,
      totalImplementationCosts: totalImplementationCosts,
      totalFotCosts: totalFotCosts,
      totalExpenses: totalExpensesSum,
      totalGrossProfit: totalGrossProfit,
      totalTax: totalTax,
      totalNetProfit: totalNetProfit,
      // Добавим несколько важных KPI
      roi: totalNetProfit / totalExpensesSum * 100,
      arpu: totalRevenue / data[11].totalActiveClients,
      ltv: (totalSubscription / data[11].totalActiveClients) / (1 - Math.pow(1 - churnRate/100, 12)), // Правильный расчет LTV с учетом оттока
      breakevenMonth: data.findIndex(month => month.cumulativeProfit > 0) + 1,
      // Дополнительные KPI для анализа внедрения
      implementationMargin: (totalIntegration - totalCacCosts - totalImplementationCosts) / totalIntegration * 100,
      churnRate: churnRate, // Добавляем текущий churn rate для анализа
      // Новые метрики
      nrr: startingMRR > 0 ? ((startingMRR + expansionMRR - churnedMRR) / startingMRR) * 100 : 100, // Net Revenue Retention
      cacPaybackPeriod: totalRevenue > 0 ? (integrationPrice * (cacPercentage / 100)) / ((totalRevenue / data[11].totalActiveClients) * 0.7) : 0, // CAC Payback в месяцах (70% gross margin)
      expansionRevenue: expansionMRR, // Дополнительный доход от upsell
      churnedRevenue: churnedMRR, // Потерянный доход от оттока
      
      // Декомпозиция Upsell (ЭТАП 6)
      totalAdditionalBotsRevenue: data.reduce((sum, month) => sum + month.additionalBotsRevenue, 0),
      totalNewFeaturesRevenue: data.reduce((sum, month) => sum + month.newFeaturesRevenue, 0),
      totalMessageExpansionRevenue: data.reduce((sum, month) => sum + month.messageExpansionRevenue, 0),
      totalAdditionalIntegrationsRevenue: data.reduce((sum, month) => sum + month.additionalIntegrationsRevenue, 0),
      totalUpsellRevenue: data.reduce((sum, month) => sum + month.totalUpsellRevenue, 0)
    });
  }, [taxMode, fotMode, apiCost, churnRate,
    newClients75, newClients150, newClients250, newClients500, newClients1000,
    subscriptionPrice75, subscriptionPrice150, subscriptionPrice250, subscriptionPrice500, subscriptionPrice1000,
    integrationPrice, cacPercentage, implementationPercentage, apiCostPercentage,
    fotOptimistic, fotPessimistic, taxRateOptimistic, taxRatePessimistic,
    monthlyUpsellRate, averageUpsellIncrease, maxImplementationCost,
    partnerCommissionRate, salesTeamPercentage, marketingPercentage, leadGenerationPerClient,
    messages75, messages150, messages250, messages500, messages1000,
    messageUsageRate, carryOverPercentage, additionalMessagePrice,
    additionalBotsRate, additionalBotsPrice, newFeaturesRate, newFeaturesPrice,
    messageExpansionRate, messageExpansionPrice, additionalIntegrationsRate, additionalIntegrationsPrice]);
    
  // Расчёт всей модели при изменении параметров
  useEffect(() => {
    calculateFinancialModel();
  }, [calculateFinancialModel]);

  // Компонент для подсказок
  const InfoTooltip = ({ text, className = "" }: { text: string; className?: string }) => {
    const [isVisible, setIsVisible] = useState(false);
    
    return (
      <div className={`relative inline-block ${className}`}>
        <div
          className="cursor-help ml-1"
          onMouseEnter={() => setIsVisible(true)}
          onMouseLeave={() => setIsVisible(false)}
        >
          <svg className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        
        {isVisible && (
          <div className="absolute z-50 w-64 p-3 bg-gray-800 text-white text-sm rounded-lg shadow-lg -top-2 left-6 transform -translate-y-full">
            <div className="absolute w-3 h-3 bg-gray-800 transform rotate-45 -bottom-1.5 left-3"></div>
            {text}
          </div>
        )}
      </div>
    );
  };
  
  // Компонент для карточки с метрикой (новый стиль)
  const MetricCard = ({ title, value, color = theme.primary, icon, trend = null, subValue = null, large = false, tooltip = null }: any) => (
    <div 
      className={`bg-white rounded-2xl p-6 ${large ? 'col-span-2' : ''} 
        transition-all duration-300 hover:shadow-lg hover:translate-y-0.5 border border-gray-100`}
    >
      <div className="flex items-center justify-between mb-2">
        <h3 className="text-sm font-medium text-gray-700 flex items-center">
          {title}
          {tooltip && <InfoTooltip text={tooltip} />}
        </h3>
        {icon && <div className="text-gray-400">{icon}</div>}
      </div>
      <p className={`${large ? 'text-4xl' : 'text-3xl'} font-bold tracking-tight mb-1`} style={{ color }}>
        {typeof value === 'number' ? formatCurrency(value) : value}
      </p>
      {subValue && <p className="text-sm text-gray-500">{subValue}</p>}
    </div>
  );

  // Современный график доходов и расходов с четким разделением типов доходов
  const RevenueChart = () => (
    <div className="bg-white p-6 rounded-2xl shadow-sm border border-gray-100">
      <h2 className="text-lg font-medium text-gray-800 mb-4 flex items-center">
        Динамика доходов
        <InfoTooltip 
          text="График показывает разбивку доходов по трем источникам: внедрение (единоразовое), подписка (ежемесячное) и дополнительные сообщения." 
          className="ml-2"
        />
      </h2>
      <ResponsiveContainer width="100%" height={400}>
        <AreaChart data={monthlyData} margin={{ top: 20, right: 30, left: 20, bottom: 10 }}>
          <defs>
            <linearGradient id="revenueAreaGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor={theme.income.primary} stopOpacity={0.8}/>
              <stop offset="95%" stopColor={theme.income.primary} stopOpacity={0.1}/>
            </linearGradient>
            <linearGradient id="subscriptionAreaGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor={theme.income.secondary} stopOpacity={0.8}/>
              <stop offset="95%" stopColor={theme.income.secondary} stopOpacity={0.1}/>
            </linearGradient>
            <linearGradient id="integrationAreaGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor={theme.accent} stopOpacity={0.8}/>
              <stop offset="95%" stopColor={theme.accent} stopOpacity={0.1}/>
            </linearGradient>
            <linearGradient id="profitAreaGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor={theme.profit.primary} stopOpacity={0.8}/>
              <stop offset="95%" stopColor={theme.profit.primary} stopOpacity={0.1}/>
            </linearGradient>
          </defs>
          <CartesianGrid strokeDasharray="3 3" opacity={0.1} />
          <XAxis 
            dataKey="month" 
            tick={{ fill: theme.darkGray }} 
            tickLine={{ stroke: theme.lightGray }}
            axisLine={{ stroke: theme.lightGray }}
          />
          <YAxis 
            tick={{ fill: theme.darkGray }}
            axisLine={{ stroke: theme.lightGray }}
            tickLine={{ stroke: theme.lightGray }}
            tickFormatter={value => value >= 1000 ? `$${value / 1000}k` : `$${value}`}
          />
          <Tooltip 
            formatter={(value: any) => formatCurrency(Number(value))}
            contentStyle={{ 
              backgroundColor: theme.tooltipBackground,
              borderRadius: '12px',
              border: 'none',
              boxShadow: '0 4px 20px rgba(0,0,0,0.2)',
              color: theme.light
            }}
          />
          <Legend 
            verticalAlign="top" 
            height={36} 
            iconType="circle"
          />
          <Area 
            type="monotone" 
            dataKey="integrationRevenue" 
            stackId="1" 
            fill="url(#integrationAreaGradient)" 
            stroke={theme.accent} 
            name="Интеграция" 
            fillOpacity={1}
            strokeWidth={2}
          />
          <Area 
            type="monotone" 
            dataKey="subscriptionRevenue" 
            stackId="1" 
            fill="url(#subscriptionAreaGradient)" 
            stroke={theme.income.secondary} 
            name="Подписка" 
            fillOpacity={1}
            strokeWidth={2}
          />
          <Area 
            type="monotone" 
            dataKey="additionalMessagesRevenue" 
            stackId="1" 
            fill="url(#revenueAreaGradient)" 
            stroke={theme.income.primary} 
            name="Доп. сообщения" 
            fillOpacity={1}
            strokeWidth={2}
          />
          <Area 
            type="monotone" 
            dataKey="cumulativeProfit" 
            name="Накопит. прибыль" 
            fill="url(#profitAreaGradient)" 
            stroke={theme.profit.primary} 
            fillOpacity={1}
            strokeWidth={2}
          />
        </AreaChart>
      </ResponsiveContainer>
    </div>
    
    {/* Блок с декомпозицией upsell */}
    <div className="bg-white p-6 rounded-2xl shadow-sm border border-gray-100 mt-6">
      <h2 className="text-lg font-medium text-gray-800 mb-4 flex items-center">
        Декомпозиция Upsell
        <InfoTooltip 
          text="График показывает разбивку доходов от upsell на четыре типа: дополнительные боты, новые функции, расширение объема сообщений и дополнительные интеграции." 
          className="ml-2"
        />
      </h2>
      <ResponsiveContainer width="100%" height={350}>
        <AreaChart data={monthlyData} margin={{ top: 20, right: 30, left: 20, bottom: 10 }}>
          <defs>
            <linearGradient id="botsGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#4F46E5" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#4F46E5" stopOpacity={0.1}/>
            </linearGradient>
            <linearGradient id="featuresGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#10B981" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#10B981" stopOpacity={0.1}/>
            </linearGradient>
            <linearGradient id="messagesGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#F59E0B" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#F59E0B" stopOpacity={0.1}/>
            </linearGradient>
            <linearGradient id="integrationsGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor="#EC4899" stopOpacity={0.8}/>
              <stop offset="95%" stopColor="#EC4899" stopOpacity={0.1}/>
            </linearGradient>
          </defs>
          <CartesianGrid strokeDasharray="3 3" opacity={0.1} />
          <XAxis 
            dataKey="month" 
            tick={{ fill: theme.darkGray }} 
            tickLine={{ stroke: theme.lightGray }}
            axisLine={{ stroke: theme.lightGray }}
          />
          <YAxis 
            tick={{ fill: theme.darkGray }}
            axisLine={{ stroke: theme.lightGray }}
            tickLine={{ stroke: theme.lightGray }}
            tickFormatter={value => value >= 1000 ? `$${value / 1000}k` : `$${value}`}
          />
          <Tooltip 
            formatter={(value: any) => formatCurrency(Number(value))}
            contentStyle={{ 
              backgroundColor: theme.tooltipBackground,
              borderRadius: '12px',
              border: 'none',
              boxShadow: '0 4px 20px rgba(0,0,0,0.2)',
              color: theme.dark
            }}
          />
          <Legend 
            verticalAlign="top" 
            height={36} 
            iconType="circle"
          />
          <Area 
            type="monotone" 
            dataKey="additionalBotsRevenue" 
            stackId="1" 
            fill="url(#botsGradient)" 
            stroke="#4F46E5" 
            name="Дополнительные боты" 
            fillOpacity={1}
            strokeWidth={2}
          />
          <Area 
            type="monotone" 
            dataKey="newFeaturesRevenue" 
            stackId="1" 
            fill="url(#featuresGradient)" 
            stroke="#10B981" 
            name="Новые функции" 
            fillOpacity={1}
            strokeWidth={2}
          />
          <Area 
            type="monotone" 
            dataKey="messageExpansionRevenue" 
            stackId="1" 
            fill="url(#messagesGradient)" 
            stroke="#F59E0B" 
            name="Расширение объема сообщений" 
            fillOpacity={1}
            strokeWidth={2}
          />
          <Area 
            type="monotone" 
            dataKey="additionalIntegrationsRevenue" 
            stackId="1" 
            fill="url(#integrationsGradient)" 
            stroke="#EC4899" 
            name="Дополнительные интеграции" 
            fillOpacity={1}
            strokeWidth={2}
          />
        </AreaChart>
      </ResponsiveContainer>
      
      {/* Карточки с метриками по каждому типу upsell */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-4">
        <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-100">
          <h4 className="text-sm font-medium text-indigo-700 mb-1 flex items-center">
            Дополнительные боты
            <InfoTooltip text={`Средний чек: $${additionalBotsPrice}, Частота: ${additionalBotsRate}% клиентов в месяц`} className="ml-1" />
          </h4>
          <p className="text-2xl font-bold text-indigo-800">{formatCurrency(totalData.totalAdditionalBotsRevenue || 0)}</p>
          <p className="text-xs text-indigo-600 mt-1">
            {Math.round(((totalData.totalAdditionalBotsRevenue || 0) / (totalData.totalUpsellRevenue || 1)) * 100)}% от всего upsell
          </p>
        </div>
        
        <div className="bg-green-50 p-4 rounded-lg border border-green-100">
          <h4 className="text-sm font-medium text-green-700 mb-1 flex items-center">
            Новые функции
            <InfoTooltip text={`Средний чек: $${newFeaturesPrice}, Частота: ${newFeaturesRate}% клиентов в месяц`} className="ml-1" />
          </h4>
          <p className="text-2xl font-bold text-green-800">{formatCurrency(totalData.totalNewFeaturesRevenue || 0)}</p>
          <p className="text-xs text-green-600 mt-1">
            {Math.round(((totalData.totalNewFeaturesRevenue || 0) / (totalData.totalUpsellRevenue || 1)) * 100)}% от всего upsell
          </p>
        </div>
        
        <div className="bg-amber-50 p-4 rounded-lg border border-amber-100">
          <h4 className="text-sm font-medium text-amber-700 mb-1 flex items-center">
            Расширение сообщений
            <InfoTooltip text={`Средний чек: $${messageExpansionPrice}, Частота: ${messageExpansionRate}% клиентов в месяц`} className="ml-1" />
          </h4>
          <p className="text-2xl font-bold text-amber-800">{formatCurrency(totalData.totalMessageExpansionRevenue || 0)}</p>
          <p className="text-xs text-amber-600 mt-1">
            {Math.round(((totalData.totalMessageExpansionRevenue || 0) / (totalData.totalUpsellRevenue || 1)) * 100)}% от всего upsell
          </p>
        </div>
        
        <div className="bg-pink-50 p-4 rounded-lg border border-pink-100">
          <h4 className="text-sm font-medium text-pink-700 mb-1 flex items-center">
            Доп. интеграции
            <InfoTooltip text={`Средний чек: $${additionalIntegrationsPrice}, Частота: ${additionalIntegrationsRate}% клиентов в месяц`} className="ml-1" />
          </h4>
          <p className="text-2xl font-bold text-pink-800">{formatCurrency(totalData.totalAdditionalIntegrationsRevenue || 0)}</p>
          <p className="text-xs text-pink-600 mt-1">
            {Math.round(((totalData.totalAdditionalIntegrationsRevenue || 0) / (totalData.totalUpsellRevenue || 1)) * 100)}% от всего upsell
          </p>
        </div>
      </div>
    </div>
    
    {/* Основные метрики дашборда */}
    <div className="mt-6">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <MetricCard 
          title="Клиенты" 
          value={totalData.finalActiveClients || 0} 
          color={theme.clients.primary}
          trend={totalData.finalActiveClients > 10 ? "up" : "neutral"}
          subValue={`+${totalData.totalNewClients || 0} новых за год`}
          tooltip="Общее количество активных клиентов на конец периода"
        />
        <MetricCard 
          title="Общая выручка" 
          value={totalData.totalRevenue || 0} 
          color={theme.income.primary}
          subValue={`$${Math.round((totalData.totalRevenue || 0) / 12)} в мес.`}
          tooltip="Общая выручка за весь период, включая доходы от внедрения, подписки и дополнительных услуг"
        />
        <MetricCard 
          title="Чистая прибыль" 
          value={totalData.totalNetProfit || 0} 
          color={theme.profit.primary}
          subValue={`Маржа: ${Math.round((totalData.totalNetProfit || 0) / (totalData.totalRevenue || 1) * 100)}%`}
          tooltip="Чистая прибыль после вычета всех расходов и налогов"
        />
        <MetricCard 
          title="Средний чек" 
          value={(totalData.arpu || 0) * 12} 
          color={theme.secondary}
          subValue={`${Math.round(totalData.arpu || 0)} в месяц`}
          tooltip="Средний годовой доход с одного клиента (ARPU * 12)"
        />
      </div>
    </div>
  );
};

// Компоненты KPIRadarChart и DetailedTable временно удалены для исправления ошибок компиляции

  // Панель настройки параметров Upsell
  const UpsellSettingsPanel = () => (
    <div className="bg-white p-6 rounded-2xl shadow-sm border border-gray-100 mt-6">
      <h2 className="text-lg font-medium text-gray-800 mb-4 flex items-center">
        Настройки Upsell
        <InfoTooltip 
          text="Настройте параметры для разных типов дополнительных продаж существующим клиентам" 
          className="ml-2"
        />
      </h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-6">
          {/* Блок 1: Дополнительные боты */}
          <div className="bg-white p-4 rounded-lg border border-indigo-100 shadow-sm">
            <h4 className="text-sm font-medium text-indigo-700 mb-2 flex items-center">
              1. Дополнительные боты
              <InfoTooltip text="Выручка от продажи дополнительных ботов существующим клиентам" />
            </h4>
            <div className="grid grid-cols-2 gap-3 mb-3">
              <div>
                <label className="block text-xs text-gray-500 mb-1">% клиентов в месяц</label>
                <EditableCell 
                  value={additionalBotsRate} 
                  onChange={setAdditionalBotsRate} 
                  min={0}
                  max={15}
                  step={0.1}
                />
              </div>
              <div>
                <label className="block text-xs text-gray-500 mb-1">Средний чек, $</label>
                <EditableCell 
                  value={additionalBotsPrice} 
                  onChange={setAdditionalBotsPrice} 
                  min={0}
                  max={500}
                  step={5}
                />
              </div>
            </div>
            <div className="text-xs text-gray-500">
              Прогноз: {formatCurrency(totalData.totalAdditionalBotsRevenue || 0)} за год
            </div>
          </div>
          
          {/* Блок 2: Новые функции */}
          <div className="bg-white p-4 rounded-lg border border-green-100 shadow-sm">
            <h4 className="text-sm font-medium text-green-700 mb-2 flex items-center">
              2. Новые функции
              <InfoTooltip text="Выручка от продажи новых функций существующим клиентам" />
            </h4>
            <div className="grid grid-cols-2 gap-3 mb-3">
              <div>
                <label className="block text-xs text-gray-500 mb-1">% клиентов в месяц</label>
                <EditableCell 
                  value={newFeaturesRate} 
                  onChange={setNewFeaturesRate} 
                  min={0}
                  max={15}
                  step={0.1}
                />
              </div>
              <div>
                <label className="block text-xs text-gray-500 mb-1">Средний чек, $</label>
                <EditableCell 
                  value={newFeaturesPrice} 
                  onChange={setNewFeaturesPrice} 
                  min={0}
                  max={300}
                  step={5}
                />
              </div>
            </div>
            <div className="text-xs text-gray-500">
              Прогноз: {formatCurrency(totalData.totalNewFeaturesRevenue || 0)} за год
            </div>
          </div>
        </div>
        
        <div className="space-y-6">
          {/* Блок 3: Расширение объема сообщений */}
          <div className="bg-white p-4 rounded-lg border border-amber-100 shadow-sm">
            <h4 className="text-sm font-medium text-amber-700 mb-2 flex items-center">
              3. Расширение объема сообщений
              <InfoTooltip text="Выручка от увеличения пакета сообщений существующим клиентам" />
            </h4>
            <div className="grid grid-cols-2 gap-3 mb-3">
              <div>
                <label className="block text-xs text-gray-500 mb-1">% клиентов в месяц</label>
                <EditableCell 
                  value={messageExpansionRate} 
                  onChange={setMessageExpansionRate} 
                  min={0}
                  max={15}
                  step={0.1}
                />
              </div>
              <div>
                <label className="block text-xs text-gray-500 mb-1">Средний чек, $</label>
                <EditableCell 
                  value={messageExpansionPrice} 
                  onChange={setMessageExpansionPrice} 
                  min={0}
                  max={200}
                  step={5}
                />
              </div>
            </div>
            <div className="text-xs text-gray-500">
              Прогноз: {formatCurrency(totalData.totalMessageExpansionRevenue || 0)} за год
            </div>
          </div>
          
          {/* Блок 4: Дополнительные интеграции */}
          <div className="bg-white p-4 rounded-lg border border-pink-100 shadow-sm">
            <h4 className="text-sm font-medium text-pink-700 mb-2 flex items-center">
              4. Дополнительные интеграции
              <InfoTooltip text="Выручка от продажи дополнительных интеграций существующим клиентам" />
            </h4>
            <div className="grid grid-cols-2 gap-3 mb-3">
              <div>
                <label className="block text-xs text-gray-500 mb-1">% клиентов в месяц</label>
                <EditableCell 
                  value={additionalIntegrationsRate} 
                  onChange={setAdditionalIntegrationsRate} 
                  min={0}
                  max={15}
                  step={0.1}
                />
              </div>
              <div>
                <label className="block text-xs text-gray-500 mb-1">Средний чек, $</label>
                <EditableCell 
                  value={additionalIntegrationsPrice} 
                  onChange={setAdditionalIntegrationsPrice} 
                  min={0}
                  max={500}
                  step={5}
                />
              </div>
            </div>
            <div className="text-xs text-gray-500">
              Прогноз: {formatCurrency(totalData.totalAdditionalIntegrationsRevenue || 0)} за год
            </div>
          </div>
        </div>
      </div>
      
      {/* Итоговая информация по upsell */}
      <div className="mt-6 p-4 rounded-lg bg-gray-50 border border-gray-200">
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-base font-medium text-gray-700">Общий прогноз Upsell</h3>
            <p className="text-sm text-gray-500">Суммарный доход от всех типов дополнительных продаж</p>
          </div>
          <div className="text-right">
            <p className="text-2xl font-bold text-indigo-700">{formatCurrency(totalData.totalUpsellRevenue || 0)}</p>
            <p className="text-sm text-gray-500">
              {Math.round((totalData.totalUpsellRevenue || 0) / (totalData.totalRevenue || 1) * 100)}% от общей выручки
            </p>
          </div>
        </div>
      </div>
    </div>
  );

  // Изменяем обработчик вкладок для добавления новой вкладки с настройками upsell
  const renderTabContent = () => {
    if (activeTab === 'dashboard') {
      return <RevenueChart />;
    } else if (activeTab === 'upsell') {
      return <UpsellSettingsPanel />;
    }
    // Здесь можно добавить дополнительные вкладки
    return null;
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        <header className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Финансовая модель SaaS</h1>
          <p className="text-lg text-gray-600 mt-2">Полная декомпозиция доходов и расходов</p>
        </header>
        
        {/* Навигация */}
        <div className="mb-6 border-b border-gray-200">
          <nav className="flex -mb-px" aria-label="Tabs">
            <button
              onClick={() => setActiveTab('dashboard')}
              className={`${
                activeTab === 'dashboard'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm`}
            >
              Дашборд
            </button>
            <button
              onClick={() => setActiveTab('upsell')}
              className={`${
                activeTab === 'upsell'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm`}
            >
              Настройки Upsell
            </button>
          </nav>
        </div>
        
        {/* Содержимое вкладки */}
        {renderTabContent()}
      </div>
    </div>
  );
};

export default FinancialDashboard;